{"version":3,"sources":["settings.ts"],"names":[],"mappings":"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","file":"settings.js","sourcesContent":["/// <reference path=\"../typings/node.d.ts\" />\r\nimport {env} from 'vscode';\r\nimport * as fs from 'fs'; \r\nimport * as path from 'path';\r\nimport getAppPath from './vscodePath';\r\nimport extVersion from './extVersion';\r\nlet settings = null;\r\n\r\nexport const status = {\r\n    enabled: 'enabled',\r\n    disabled: 'disabled',\r\n    notInstalled: 'notInstalled'\r\n};\r\ninterface ISetting{\r\n    appPath: string\r\n    isWin: boolean\r\n    isInsiders: boolean\r\n    extensionFolder: string\r\n    settingsPath: string\r\n    pluginPath:string\r\n    jsfile: string\r\n    jsfilebak: string\r\n    extVersion: string\r\n}\r\nexport function getSettings():ISetting {\r\n    if (settings) return settings;\r\n    let isInsiders = /insiders/i.test((<{appName?:string}>env).appName);\r\n    let isWin = /^win/.test(process.platform);\r\n    let homeDir = isWin ? '%USERPROFILE%' : 'HOME';\r\n    let extensionFolder = path.join(homeDir, isInsiders\r\n        ? '.vscode-insiders'\r\n        : '.vscode', 'extensions');\r\n    let codePath = isInsiders ? '/Code - Insiders' : '/Code';\r\n    let appPath = getAppPath();\r\n    let appDir = path.dirname(require.main.filename);\r\n    let base = appDir + (isWin ? '\\\\vs\\\\workbench' : '/vs/workbench');\r\n    let jsfile = base + (isWin ? '\\\\workbench.main.js' : '/workbench.main.js');\r\n    let jsfilebak = base + (isWin ? '\\\\workbench.main.js.turtle.bak' : '/workbench.main.js.turtle.bak');\r\n\r\n    settings = {\r\n        appPath: appPath,\r\n        isWin: isWin,\r\n        isInsiders: isInsiders,\r\n        extensionFolder: extensionFolder,\r\n        settingsPath: path.join(appPath, codePath, 'User', 'vsturtle.settings.json'),\r\n        pluginPath: path.join(appPath, codePath, 'User', 'turtle.plugin'),\r\n        jsfile: jsfile,\r\n        jsfilebak: jsfilebak,\r\n        extVersion: extVersion\r\n    };\r\n    return settings;\r\n}\r\ninterface IState{\r\n    version: string\r\n    status: string\r\n    scriptPaths:string[];\r\n}\r\nexport function getState():IState {\r\n    let lets = getSettings();\r\n    try {\r\n        let state:Buffer= fs.readFileSync(lets.settingsPath);\r\n        return JSON.parse(state.toString());\r\n    } catch (error) {\r\n        return {\r\n            version: '0',\r\n            status: status.notInstalled,\r\n            scriptPaths:[]\r\n        };\r\n    }\r\n}\r\n\r\nexport function setState(state) {\r\n    let lets = getSettings();\r\n    fs.writeFileSync(lets.settingsPath, JSON.stringify(state));\r\n}\r\n\r\nexport function setStatus(sts) {\r\n    setState({\r\n        version: extVersion,\r\n        status: sts,\r\n        scriptPaths:null\r\n    });\r\n}\r\n\r\nexport function deleteState() {\r\n    let lets = getSettings();\r\n    fs.unlinkSync(lets.settingsPath);\r\n}\r\n\r\n\r\n"],"sourceRoot":"/source/"}